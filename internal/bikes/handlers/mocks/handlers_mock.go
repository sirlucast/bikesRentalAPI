// Code generated by MockGen. DO NOT EDIT.
// Source: internal/bikes/handlers/handlers.go
//
// Generated by this command:
//
//	mockgen -source=internal/bikes/handlers/handlers.go -destination=internal/bikes/handlers/mocks/handlers_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// AddBike mocks base method.
func (m *MockHandler) AddBike(w http.ResponseWriter, req *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBike", w, req)
}

// AddBike indicates an expected call of AddBike.
func (mr *MockHandlerMockRecorder) AddBike(w, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBike", reflect.TypeOf((*MockHandler)(nil).AddBike), w, req)
}

// GetBikeByID mocks base method.
func (m *MockHandler) GetBikeByID(w http.ResponseWriter, req *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetBikeByID", w, req)
}

// GetBikeByID indicates an expected call of GetBikeByID.
func (mr *MockHandlerMockRecorder) GetBikeByID(w, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBikeByID", reflect.TypeOf((*MockHandler)(nil).GetBikeByID), w, req)
}

// ListAllBikes mocks base method.
func (m *MockHandler) ListAllBikes(w http.ResponseWriter, req *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListAllBikes", w, req)
}

// ListAllBikes indicates an expected call of ListAllBikes.
func (mr *MockHandlerMockRecorder) ListAllBikes(w, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllBikes", reflect.TypeOf((*MockHandler)(nil).ListAllBikes), w, req)
}

// ListAvailableBikes mocks base method.
func (m *MockHandler) ListAvailableBikes(w http.ResponseWriter, req *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListAvailableBikes", w, req)
}

// ListAvailableBikes indicates an expected call of ListAvailableBikes.
func (mr *MockHandlerMockRecorder) ListAvailableBikes(w, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableBikes", reflect.TypeOf((*MockHandler)(nil).ListAvailableBikes), w, req)
}

// UpdateBike mocks base method.
func (m *MockHandler) UpdateBike(w http.ResponseWriter, req *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateBike", w, req)
}

// UpdateBike indicates an expected call of UpdateBike.
func (mr *MockHandlerMockRecorder) UpdateBike(w, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBike", reflect.TypeOf((*MockHandler)(nil).UpdateBike), w, req)
}
