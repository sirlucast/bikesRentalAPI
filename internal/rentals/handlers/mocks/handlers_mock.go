// Code generated by MockGen. DO NOT EDIT.
// Source: internal/rentals/handlers/handlers.go
//
// Generated by this command:
//
//	mockgen -source=internal/rentals/handlers/handlers.go -destination=internal/rentals/handlers/mocks/handlers_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// EndBikeRental mocks base method.
func (m *MockHandler) EndBikeRental(w http.ResponseWriter, req *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndBikeRental", w, req)
}

// EndBikeRental indicates an expected call of EndBikeRental.
func (mr *MockHandlerMockRecorder) EndBikeRental(w, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndBikeRental", reflect.TypeOf((*MockHandler)(nil).EndBikeRental), w, req)
}

// GetRentalDetails mocks base method.
func (m *MockHandler) GetRentalDetails(w http.ResponseWriter, req *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetRentalDetails", w, req)
}

// GetRentalDetails indicates an expected call of GetRentalDetails.
func (mr *MockHandlerMockRecorder) GetRentalDetails(w, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRentalDetails", reflect.TypeOf((*MockHandler)(nil).GetRentalDetails), w, req)
}

// GetRentalHistoryByUserID mocks base method.
func (m *MockHandler) GetRentalHistoryByUserID(w http.ResponseWriter, req *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetRentalHistoryByUserID", w, req)
}

// GetRentalHistoryByUserID indicates an expected call of GetRentalHistoryByUserID.
func (mr *MockHandlerMockRecorder) GetRentalHistoryByUserID(w, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRentalHistoryByUserID", reflect.TypeOf((*MockHandler)(nil).GetRentalHistoryByUserID), w, req)
}

// GetRentalList mocks base method.
func (m *MockHandler) GetRentalList(w http.ResponseWriter, req *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetRentalList", w, req)
}

// GetRentalList indicates an expected call of GetRentalList.
func (mr *MockHandlerMockRecorder) GetRentalList(w, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRentalList", reflect.TypeOf((*MockHandler)(nil).GetRentalList), w, req)
}

// StartBikeRental mocks base method.
func (m *MockHandler) StartBikeRental(w http.ResponseWriter, req *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartBikeRental", w, req)
}

// StartBikeRental indicates an expected call of StartBikeRental.
func (mr *MockHandlerMockRecorder) StartBikeRental(w, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBikeRental", reflect.TypeOf((*MockHandler)(nil).StartBikeRental), w, req)
}

// UpdateRentalDetails mocks base method.
func (m *MockHandler) UpdateRentalDetails(w http.ResponseWriter, req *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateRentalDetails", w, req)
}

// UpdateRentalDetails indicates an expected call of UpdateRentalDetails.
func (mr *MockHandlerMockRecorder) UpdateRentalDetails(w, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRentalDetails", reflect.TypeOf((*MockHandler)(nil).UpdateRentalDetails), w, req)
}
